// FrameX News Management System
// WYSIWYG Editor v·ªõi Quill.js - D·ªÖ s·ª≠ d·ª•ng nh∆∞ Microsoft Word

// Supabase Configuration
const SUPABASE_URL = 'https://lyctpwhdskgkqebzreib.supabase.co';
const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx5Y3Rwd2hkc2tna3FlYnpyZWliIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAzNjMyMzksImV4cCI6MjA3NTkzOTIzOX0.vQE07u5WYJIf8R5XqBfcEAcxygnRzy0n2_NetC9IhMk';

let quillVi, quillEn;
let currentArticleId = null;

// Initialize Quill Editors
function initEditors() {
    const toolbarOptions = [
        [{ 'header': [2, 3, false] }],
        ['bold', 'italic', 'underline', 'strike'],
        ['blockquote', 'code-block'],
        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
        [{ 'indent': '-1'}, { 'indent': '+1' }],
        ['link', 'image', 'video'],
        [{ 'color': [] }, { 'background': [] }],
        [{ 'align': [] }],
        ['clean']
    ];

    quillVi = new Quill('#editorVi', {
        theme: 'snow',
        modules: {
            toolbar: toolbarOptions
        },
        placeholder: 'Vi·∫øt n·ªôi dung b√†i vi·∫øt ·ªü ƒë√¢y... S·ª≠ d·ª•ng c√°c c√¥ng c·ª• ph√≠a tr√™n gi·ªëng nh∆∞ Microsoft Word.'
    });

    quillEn = new Quill('#editorEn', {
        theme: 'snow',
        modules: {
            toolbar: toolbarOptions
        },
        placeholder: 'Write your article content here... Use the tools above like Microsoft Word.'
    });
}

// Language Tab Switching
function initLanguageTabs() {
    const tabs = document.querySelectorAll('.lang-tab');
    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            const lang = tab.dataset.lang;
            
            // Update tabs
            tabs.forEach(t => t.classList.remove('active'));
            tab.classList.add('active');
            
            // Update content
            document.querySelectorAll('.lang-content').forEach(content => {
                content.classList.remove('active');
            });
            document.querySelector(`.lang-content[data-lang="${lang}"]`).classList.add('active');
        });
    });
}

// View Management
function showView(view) {
    const views = {
        editor: document.getElementById('editorView'),
        list: document.getElementById('listView'),
        media: document.getElementById('mediaView')
    };

    Object.values(views).forEach(v => v.classList.add('hidden'));
    views[view].classList.remove('hidden');

    if (view === 'list') {
        loadArticlesList();
    } else if (view === 'media') {
        loadMediaLibrary();
    }
}

// Alert System
function showAlert(message, type = 'success') {
    const alertContainer = document.getElementById('alertContainer');
    const alert = document.createElement('div');
    alert.className = `alert alert-${type}`;
    alert.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-circle' : 'info-circle'}"></i>
        <span>${message}</span>
    `;
    alertContainer.appendChild(alert);

    setTimeout(() => {
        alert.remove();
    }, 5000);
}

// Generate Slug from Title
function generateSlug(text) {
    const vietnameseMap = {
        '√†': 'a', '√°': 'a', '·∫£': 'a', '√£': 'a', '·∫°': 'a',
        'ƒÉ': 'a', '·∫±': 'a', '·∫Ø': 'a', '·∫≥': 'a', '·∫µ': 'a', '·∫∑': 'a',
        '√¢': 'a', '·∫ß': 'a', '·∫•': 'a', '·∫©': 'a', '·∫´': 'a', '·∫≠': 'a',
        '√®': 'e', '√©': 'e', '·∫ª': 'e', '·∫Ω': 'e', '·∫π': 'e',
        '√™': 'e', '·ªÅ': 'e', '·∫ø': 'e', '·ªÉ': 'e', '·ªÖ': 'e', '·ªá': 'e',
        '√¨': 'i', '√≠': 'i', '·ªâ': 'i', 'ƒ©': 'i', '·ªã': 'i',
        '√≤': 'o', '√≥': 'o', '·ªè': 'o', '√µ': 'o', '·ªç': 'o',
        '√¥': 'o', '·ªì': 'o', '·ªë': 'o', '·ªï': 'o', '·ªó': 'o', '·ªô': 'o',
        '∆°': 'o', '·ªù': 'o', '·ªõ': 'o', '·ªü': 'o', '·ª°': 'o', '·ª£': 'o',
        '√π': 'u', '√∫': 'u', '·ªß': 'u', '≈©': 'u', '·ª•': 'u',
        '∆∞': 'u', '·ª´': 'u', '·ª©': 'u', '·ª≠': 'u', '·ªØ': 'u', '·ª±': 'u',
        '·ª≥': 'y', '√Ω': 'y', '·ª∑': 'y', '·ªπ': 'y', '·ªµ': 'y',
        'ƒë': 'd',
        '√Ä': 'A', '√Å': 'A', '·∫¢': 'A', '√É': 'A', '·∫†': 'A',
        'ƒÇ': 'A', '·∫∞': 'A', '·∫Æ': 'A', '·∫≤': 'A', '·∫¥': 'A', '·∫∂': 'A',
        '√Ç': 'A', '·∫¶': 'A', '·∫§': 'A', '·∫®': 'A', '·∫™': 'A', '·∫¨': 'A',
        '√à': 'E', '√â': 'E', '·∫∫': 'E', '·∫º': 'E', '·∫∏': 'E',
        '√ä': 'E', '·ªÄ': 'E', '·∫æ': 'E', '·ªÇ': 'E', '·ªÑ': 'E', '·ªÜ': 'E',
        '√å': 'I', '√ç': 'I', '·ªà': 'I', 'ƒ®': 'I', '·ªä': 'I',
        '√í': 'O', '√ì': 'O', '·ªé': 'O', '√ï': 'O', '·ªå': 'O',
        '√î': 'O', '·ªí': 'O', '·ªê': 'O', '·ªî': 'O', '·ªñ': 'O', '·ªò': 'O',
        '∆†': 'O', '·ªú': 'O', '·ªö': 'O', '·ªû': 'O', '·ª†': 'O', '·ª¢': 'O',
        '√ô': 'U', '√ö': 'U', '·ª¶': 'U', '≈®': 'U', '·ª§': 'U',
        '∆Ø': 'U', '·ª™': 'U', '·ª®': 'U', '·ª¨': 'U', '·ªÆ': 'U', '·ª∞': 'U',
        '·ª≤': 'Y', '√ù': 'Y', '·ª∂': 'Y', '·ª∏': 'Y', '·ª¥': 'Y',
        'ƒê': 'D'
    };

    let slug = text.toLowerCase();
    
    // Replace Vietnamese characters
    for (const [key, value] of Object.entries(vietnameseMap)) {
        slug = slug.replace(new RegExp(key, 'g'), value);
    }
    
    // Remove special characters and replace spaces with hyphens
    slug = slug
        .replace(/[^a-z0-9\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '');
    
    return slug;
}

// Form Submission
document.getElementById('articleForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const titleVi = document.getElementById('titleVi').value.trim();
    const titleEn = document.getElementById('titleEn').value.trim();
    const excerptVi = document.getElementById('excerptVi').value.trim();
    const excerptEn = document.getElementById('excerptEn').value.trim();
    const contentVi = quillVi.root.innerHTML;
    const contentEn = quillEn.root.innerHTML;
    const category = document.getElementById('category').value;
    const featuredImage = document.getElementById('featuredImage').value.trim();
    const author = document.getElementById('author').value.trim();
    const readTime = parseInt(document.getElementById('readTime').value);
    const status = document.getElementById('status').value;

    // Validation with detailed error messages
    const missingFields = [];
    if (!titleVi) missingFields.push('Ti√™u ƒë·ªÅ (Ti·∫øng Vi·ªát)');
    if (!titleEn) missingFields.push('Title (English)');
    if (!excerptVi) missingFields.push('T√≥m t·∫Øt (Ti·∫øng Vi·ªát)');
    if (!excerptEn) missingFields.push('Excerpt (English)');
    if (!category) missingFields.push('Danh m·ª•c');
    
    if (missingFields.length > 0) {
        showAlert(`‚ùå Thi·∫øu th√¥ng tin: ${missingFields.join(', ')}`, 'danger');
        return;
    }

    const viContentLength = quillVi.getText().trim().length;
    const enContentLength = quillEn.getText().trim().length;
    
    if (viContentLength < 50) {
        showAlert(`‚ùå N·ªôi dung Ti·∫øng Vi·ªát qu√° ng·∫Øn (${viContentLength}/50 k√Ω t·ª±). Vui l√≤ng vi·∫øt th√™m!`, 'danger');
        return;
    }
    
    if (enContentLength < 50) {
        showAlert(`‚ùå N·ªôi dung English qu√° ng·∫Øn (${enContentLength}/50 k√Ω t·ª±). Vui l√≤ng vi·∫øt th√™m!`, 'danger');
        return;
    }

    // Generate slugs
    const slugVi = generateSlug(titleVi);
    const slugEn = generateSlug(titleEn);

    // Category names
    const categoryNames = {
        'cong-nghe': { vi: 'C√¥ng Ngh·ªá', en: 'Technology' },
        'du-an': { vi: 'D·ª± √Ån', en: 'Projects' },
        'huong-dan': { vi: 'H∆∞·ªõng D·∫´n', en: 'Guides' }
    };

    const articleData = {
        title_vi: titleVi,
        title_en: titleEn,
        slug_vi: slugVi,
        slug_en: slugEn,
        category: category,
        category_vi: categoryNames[category].vi,
        category_en: categoryNames[category].en,
        excerpt_vi: excerptVi,
        excerpt_en: excerptEn,
        content_vi: contentVi,
        content_en: contentEn,
        featured_image: featuredImage || '',
        media_gallery: [],
        author: author || 'FrameX Team',
        read_time: readTime || 5,
        published_date: new Date().toISOString(),
        status: status,
        meta_description_vi: excerptVi.substring(0, 160),
        meta_description_en: excerptEn.substring(0, 160)
    };

    console.log('üìù Saving article:', {
        titleVi,
        titleEn,
        category,
        status,
        contentViLength: viContentLength,
        contentEnLength: enContentLength
    });
    console.log('üì¶ Article data to save:', articleData);

    try {
        let response;
        if (currentArticleId) {
            console.log('‚úèÔ∏è Updating article ID:', currentArticleId);
            // Update existing article with Supabase
            response = await fetch(`${SUPABASE_URL}/rest/v1/news_articles?id=eq.${currentArticleId}`, {
                method: 'PATCH',
                headers: { 
                    'apikey': SUPABASE_KEY,
                    'Authorization': `Bearer ${SUPABASE_KEY}`,
                    'Content-Type': 'application/json',
                    'Prefer': 'return=representation'
                },
                body: JSON.stringify(articleData)
            });
        } else {
            console.log('‚ûï Creating new article');
            // Create new article with Supabase
            response = await fetch(`${SUPABASE_URL}/rest/v1/news_articles`, {
                method: 'POST',
                headers: { 
                    'apikey': SUPABASE_KEY,
                    'Authorization': `Bearer ${SUPABASE_KEY}`,
                    'Content-Type': 'application/json',
                    'Prefer': 'return=representation'
                },
                body: JSON.stringify(articleData)
            });
        }

        if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ Supabase response:', result);
            // Supabase returns array, get first item
            const savedArticle = Array.isArray(result) ? result[0] : result;
            console.log('üìÑ Saved article details:', {
                id: savedArticle.id,
                title_vi: savedArticle.title_vi,
                status: savedArticle.status,
                published_date: savedArticle.published_date
            });
            showAlert(`‚úÖ B√†i vi·∫øt "${titleVi}" ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng! Status: ${savedArticle.status}`, 'success');
            
            // Generate static HTML files
            await generateStaticPages(savedArticle);
            
            resetForm();
            setTimeout(() => {
                showView('list');
                loadArticlesList(); // Force reload articles list
            }, 1500);
        } else {
            // Get detailed error message
            const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));
            console.error('‚ùå Supabase Error:', response.status, errorData);
            showAlert(`‚ùå L·ªói Supabase (${response.status}): ${errorData.message || errorData.hint || 'Ki·ªÉm tra Console (F12) ƒë·ªÉ xem chi ti·∫øt'}`, 'danger');
        }
    } catch (error) {
        console.error('Error saving article:', error);
        showAlert(`‚ùå L·ªói: ${error.message || 'Kh√¥ng th·ªÉ l∆∞u b√†i vi·∫øt. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng!'}`, 'danger');
    }
});

// Generate Static HTML Pages
async function generateStaticPages(article) {
    // This function will be called after saving
    // In a real implementation, you would generate static HTML files here
    console.log('Generated static pages for:', article.title_vi);
    
    showAlert(`üìÑ ƒê√£ t·∫°o trang: tin-tuc/${article.slug_vi}.html v√† en/news/${article.slug_en}.html`, 'info');
}

// Reset Form
function resetForm() {
    document.getElementById('articleForm').reset();
    quillVi.setContents([]);
    quillEn.setContents([]);
    currentArticleId = null;
}

// Load Articles List
async function loadArticlesList() {
    const container = document.getElementById('articlesList');
    container.innerHTML = '<div class="spinner"></div>';

    try {
        // Ch·ªâ l·∫•y fields c·∫ßn thi·∫øt cho danh s√°ch (kh√¥ng l·∫•y content_vi, content_en ƒë·ªÉ tƒÉng t·ªëc)
        const response = await fetch(`${SUPABASE_URL}/rest/v1/news_articles?select=id,title_vi,title_en,category,status,published_date,read_time&order=published_date.desc&limit=50`, {
            headers: {
                'apikey': SUPABASE_KEY,
                'Authorization': `Bearer ${SUPABASE_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));
            console.error('‚ùå Supabase Load Error:', response.status, errorData);
            throw new Error(`Supabase Error ${response.status}: ${errorData.message || errorData.hint || 'Ki·ªÉm tra t√™n b·∫£ng v√† RLS settings'}`);
        }
        
        const data = await response.json();
        console.log('üì∞ Loaded articles:', data.length, 'articles');

        if (data && data.length > 0) {
            const articlesHTML = data.map(article => {
                const statusBadge = {
                    'published': 'badge-published',
                    'draft': 'badge-draft',
                    'archived': 'badge-archived'
                }[article.status] || 'badge-draft';

                const date = new Date(article.published_date).toLocaleDateString('vi-VN');

                return `
                    <div class="article-item" data-id="${article.id}">
                        <div class="article-item-title">${article.title_vi}</div>
                        <div class="article-item-meta">
                            <span class="badge ${statusBadge}">${article.status}</span>
                            <span><i class="far fa-calendar"></i> ${date}</span>
                            <span><i class="far fa-clock"></i> ${article.read_time} ph√∫t</span>
                        </div>
                        <div class="article-item-actions">
                            <button class="btn btn-sm btn-primary" onclick="editArticle('${article.id}')">
                                <i class="fas fa-edit"></i> S·ª≠a
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="deleteArticle('${article.id}', '${article.title_vi}')">
                                <i class="fas fa-trash"></i> X√≥a
                            </button>
                            <a href="article-view.html?id=${article.id}" class="btn btn-sm btn-secondary" target="_blank" title="Xem preview b√†i vi·∫øt">
                                <i class="fas fa-eye"></i> Xem
                            </a>
                        </div>
                    </div>
                `;
            }).join('');

            container.innerHTML = `<div class="articles-list">${articlesHTML}</div>`;
        } else {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-newspaper"></i>
                    <h3>Ch∆∞a c√≥ b√†i vi·∫øt n√†o</h3>
                    <p>H√£y b·∫Øt ƒë·∫ßu vi·∫øt b√†i vi·∫øt ƒë·∫ßu ti√™n c·ªßa b·∫°n!</p>
                </div>
            `;
        }
    } catch (error) {
        console.error('‚ùå Error loading articles:', error);
        container.innerHTML = `
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-circle"></i>
                <strong>L·ªói khi t·∫£i danh s√°ch b√†i vi·∫øt</strong><br>
                ${error.message}<br>
                <small>Ki·ªÉm tra Console (F12) ƒë·ªÉ xem chi ti·∫øt</small>
            </div>
        `;
    }
}

// Edit Article
async function editArticle(articleId) {
    try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/news_articles?id=eq.${articleId}&select=*`, {
            headers: {
                'apikey': SUPABASE_KEY,
                'Authorization': `Bearer ${SUPABASE_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        const data = await response.json();
        const article = data[0]; // Supabase returns array

        currentArticleId = articleId;

        // Fill form
        document.getElementById('titleVi').value = article.title_vi;
        document.getElementById('titleEn').value = article.title_en;
        document.getElementById('excerptVi').value = article.excerpt_vi;
        document.getElementById('excerptEn').value = article.excerpt_en;
        document.getElementById('category').value = article.category;
        document.getElementById('featuredImage').value = article.featured_image;
        document.getElementById('author').value = article.author;
        document.getElementById('readTime').value = article.read_time;
        document.getElementById('status').value = article.status;

        // Set editor content
        quillVi.root.innerHTML = article.content_vi;
        quillEn.root.innerHTML = article.content_en;

        // Show editor view
        showView('editor');
        window.scrollTo({ top: 0, behavior: 'smooth' });

        showAlert(`‚úèÔ∏è ƒêang ch·ªânh s·ª≠a b√†i: "${article.title_vi}"`, 'info');
    } catch (error) {
        console.error('Error loading article:', error);
        showAlert('‚ùå L·ªói khi t·∫£i b√†i vi·∫øt', 'danger');
    }
}

// Delete Article
async function deleteArticle(articleId, title) {
    if (!confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b√†i vi·∫øt "${title}"?`)) {
        return;
    }

    try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/news_articles?id=eq.${articleId}`, {
            method: 'DELETE',
            headers: {
                'apikey': SUPABASE_KEY,
                'Authorization': `Bearer ${SUPABASE_KEY}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            showAlert(`üóëÔ∏è ƒê√£ x√≥a b√†i vi·∫øt "${title}"`, 'success');
            loadArticlesList();
        } else {
            throw new Error('Delete failed');
        }
    } catch (error) {
        console.error('Error deleting article:', error);
        showAlert('‚ùå L·ªói khi x√≥a b√†i vi·∫øt', 'danger');
    }
}

// Media Library
async function loadMediaLibrary() {
    const container = document.getElementById('mediaLibrary');
    container.innerHTML = '<div class="spinner"></div>';

    try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/media_library?select=*&order=uploaded_at.desc&limit=100`, {
            headers: {
                'apikey': SUPABASE_KEY,
                'Authorization': `Bearer ${SUPABASE_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        const data = await response.json();

        if (data && data.length > 0) {
            const mediaHTML = data.map(media => {
                const isVideo = media.type === 'video';
                const icon = isVideo ? 'fa-video' : 'fa-image';
                const preview = isVideo ? 
                    `<div style="display: flex; align-items: center; justify-content: center; height: 150px; background: #f0f0f0;"><i class="fas ${icon}" style="font-size: 3rem; color: #999;"></i></div>` :
                    `<img src="${media.url}" alt="${media.filename}">`;

                return `
                    <div class="media-item" data-url="${media.url}" onclick="selectMedia('${media.url}')">
                        ${preview}
                        <div class="media-item-info">
                            <div><i class="fas ${icon}"></i> ${media.filename}</div>
                            <div>${(media.size / 1024).toFixed(0)} KB</div>
                        </div>
                    </div>
                `;
            }).join('');

            container.innerHTML = `<div class="media-grid">${mediaHTML}</div>`;
        } else {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-images"></i>
                    <h3>Th∆∞ vi·ªán tr·ªëng</h3>
                    <p>Upload ·∫£nh ho·∫∑c video ƒë·ªÉ b·∫Øt ƒë·∫ßu</p>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error loading media:', error);
        container.innerHTML = `
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-circle"></i>
                L·ªói khi t·∫£i th∆∞ vi·ªán media
            </div>
        `;
    }
}

// Select Media
function selectMedia(url) {
    document.getElementById('featuredImage').value = url;
    showAlert('‚úÖ ƒê√£ ch·ªçn ·∫£nh!', 'success');
    showView('editor');
}

// Upload Area
const uploadArea = document.getElementById('uploadArea');
const mediaUpload = document.getElementById('mediaUpload');

uploadArea.addEventListener('click', () => {
    mediaUpload.click();
});

uploadArea.addEventListener('dragover', (e) => {
    e.preventDefault();
    uploadArea.style.borderColor = '#FF6B35';
    uploadArea.style.background = '#fff5f2';
});

uploadArea.addEventListener('dragleave', () => {
    uploadArea.style.borderColor = '#e1e8ed';
    uploadArea.style.background = 'transparent';
});

uploadArea.addEventListener('drop', (e) => {
    e.preventDefault();
    uploadArea.style.borderColor = '#e1e8ed';
    uploadArea.style.background = 'transparent';
    
    const files = e.dataTransfer.files;
    handleFileUpload(files);
});

mediaUpload.addEventListener('change', (e) => {
    handleFileUpload(e.target.files);
});

// Handle File Upload
async function handleFileUpload(files) {
    if (!files || files.length === 0) return;

    for (const file of files) {
        // Validate file
        if (file.size > 10 * 1024 * 1024) {
            showAlert(`‚ùå File "${file.name}" qu√° l·ªõn (max 10MB)`, 'danger');
            continue;
        }

        const validTypes = ['image/jpeg', 'image/png', 'image/webp', 'video/mp4'];
        if (!validTypes.includes(file.type)) {
            showAlert(`‚ùå ƒê·ªãnh d·∫°ng file "${file.name}" kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£`, 'danger');
            continue;
        }

        // Save to Supabase media_library table
        // Note: For production, upload file to Supabase Storage first, then save URL
        const mediaData = {
            filename: file.name,
            url: `images/${file.name}`, // Placeholder - would be actual Supabase Storage URL
            type: file.type.startsWith('image') ? 'image' : 'video',
            size: file.size
        };

        try {
            const response = await fetch(`${SUPABASE_URL}/rest/v1/media_library`, {
                method: 'POST',
                headers: { 
                    'apikey': SUPABASE_KEY,
                    'Authorization': `Bearer ${SUPABASE_KEY}`,
                    'Content-Type': 'application/json',
                    'Prefer': 'return=representation'
                },
                body: JSON.stringify(mediaData)
            });

            if (response.ok) {
                showAlert(`‚úÖ Upload th√†nh c√¥ng: ${file.name}`, 'success');
            }
        } catch (error) {
            console.error('Upload error:', error);
            showAlert(`‚ùå L·ªói upload: ${file.name}`, 'danger');
        }
    }

    loadMediaLibrary();
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', () => {
    initEditors();
    initLanguageTabs();
    showView('editor');
    
    console.log('‚úÖ FrameX News Management System initialized!');
    console.log('üìù S·ª≠ d·ª•ng editor nh∆∞ Microsoft Word ƒë·ªÉ vi·∫øt b√†i');
});
